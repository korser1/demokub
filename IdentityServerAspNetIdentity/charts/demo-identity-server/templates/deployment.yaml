apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "demo-identity-server.fullname" . }}
  labels:
    app: {{ template "demo-identity-server.name" . }}
    chart: {{ template "demo-identity-server.chart" . }}
    draft: {{ default "draft-app" .Values.draft }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "demo-identity-server.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "demo-identity-server.name" . }}
        draft: {{ default "draft-app" .Values.draft }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - name: {{ template "demo-identity-server.name" . }}-persistent-storage
              mountPath: /mnt/certs
            - name: {{ template "demo-identity-server.name" . }}-persistent-dp
              mountPath: /mnt/dataprotection
          env:
            {{- $root := . }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $ref, $values := .Values.secrets }}
            {{- range $key, $value := $values }}
            - name: {{ $ref }}_{{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ template "demo-identity-server.fullname" $root }}-{{ $ref | lower }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
      initContainers:
        - name: install-certificate
          image: alpine:3.11
          imagePullPolicy: Always
          command:
          - sh
          - -c
          - apk add --update ca-certificates openssl && if [ -f {{ .Values.env.certificatePath }} ] ; then echo "cert file exists"; else cd /mnt/certs && openssl genrsa 2048 > private.pem && openssl req -x509 -days 365 -subj /CN=demo.ebt.com -new -key private.pem -out public.pem && openssl pkcs12 -export -in public.pem -inkey private.pem -out {{ .Values.env.certificatePath }} -password pass:${certificate_password}; fi
          env:
            - name: certificate_password
              valueFrom:
                secretKeyRef:
                  name: {{ template "demo-identity-server.fullname" $root }}-certificate
                  key: password
          volumeMounts:
            - name: {{ template "demo-identity-server.name" . }}-persistent-storage
              mountPath: /mnt/certs
      volumes:
        - name: {{ template "demo-identity-server.name" . }}-persistent-storage
          persistentVolumeClaim:
            claimName: {{ template "demo-identity-server.name" . }}-pv-claim
        - name: {{ template "demo-identity-server.name" . }}-persistent-dp
          persistentVolumeClaim:
            claimName: {{ template "demo-identity-server.name" . }}-dp-claim
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
